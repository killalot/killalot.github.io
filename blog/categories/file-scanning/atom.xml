<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: File Scanning | Ticnfae]]></title>
  <link href="http://www.ticnfae.co.uk/blog/categories/file-scanning/atom.xml" rel="self"/>
  <link href="http://www.ticnfae.co.uk/"/>
  <updated>2015-05-24T13:27:15+01:00</updated>
  <id>http://www.ticnfae.co.uk/</id>
  <author>
    <name><![CDATA[Peter Nicholson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scanning the File System With Node.js and MongoDB]]></title>
    <link href="http://www.ticnfae.co.uk/blog/2014/08/01/scanning-the-file-system-with-node-dot-js-and-mongodb"/>
    <updated>2014-08-01T11:32:20+01:00</updated>
    <id>http://www.ticnfae.co.uk/blog/2014/08/01/scanning-the-file-system-with-node-dot-js-and-mongodb</id>
    <content type="html"><![CDATA[<h2>Prerequisites</h2>

<ul>
<li>Node.js installed</li>
<li>MongoDB installed</li>
<li>Basic knowledge of how to use both</li>
</ul>


<p>At some point you may come across a situation where you would like to scan a file system / file directory or multiple storage locations. This might for a variety of reasons such as:</p>

<ul>
<li>Which directory holds the most files</li>
<li>Do you have any duplicated files</li>
<li>Which directory contains the most data</li>
</ul>


<p>Now there are plenty of methods of obtaining this information from using freeware or paid-for GUI applications to small command line scripts. However some programs do not store their results - they will present you with the information you need but if you want to analyse the results later you&rsquo;ll have to run the program again. This problem is also amplified if you want to analyse results from different media sources. For instance, drives on different machines that are not connected to each other.</p>

<p>As an experiment I decided to I see how I could utilise Node.js event based programming to scan through a file system and then use MongoDB to store the data which can then be looked at later or added to.</p>

<p>The code is contained in a single Javascript file run through Node.js on the command line:
<figure class='code'><figcaption><span> (fileIndexer.js)</span> <a href='/downloads/code/scanning-the-file-system-with-nodejs/fileIndexer.js'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// options</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">openFiles</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// counting number of currently opened files</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">directoriesToScan</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// used to hold the list of directory paths that has yet to be scanned</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">maxOpenFiles</span> <span class="o">=</span> <span class="mi">300</span><span class="p">;</span> <span class="c1">// The max number of files that can be opened at once. Any higher on my machine seemed to make no real speed difference but feel free to experiment</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">waitTime</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// defines the sleep time to wait for reading files when &#39;openFiles&#39; has reached the maximum value</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">startingDirectory</span> <span class="o">=</span> <span class="s2">&quot;/home/peter/&quot;</span><span class="p">;</span> <span class="c1">// root directory to start indexing from - this can be just &#39;/&#39; but always end in a slash</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span> <span class="c1">// for accessing file system</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">crypto</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;crypto&#39;</span><span class="p">);</span> <span class="c1">// for hashing file contents</span>
</span><span class='line'><span class="c1">// libaries for access mongodb - copied from mongoDB Node.js drive tutorial</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Db</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">).</span><span class="nx">Db</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">MongoClient</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">).</span><span class="nx">MongoClient</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">).</span><span class="nx">Server</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ReplSetServers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">).</span><span class="nx">ReplSetServers</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ObjectID</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">).</span><span class="nx">ObjectID</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Binary</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">).</span><span class="nx">Binary</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">GridStore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">).</span><span class="nx">GridStore</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Grid</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">).</span><span class="nx">Grid</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Code</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">).</span><span class="nx">Code</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">BSON</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">).</span><span class="nx">pure</span><span class="p">().</span><span class="nx">BSON</span><span class="p">;</span>
</span><span class='line'><span class="c1">// don&#39;t forget to create a &#39;file_duplicates&#39; database in your mongo server</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Db</span><span class="p">(</span><span class="s1">&#39;file_duplicates&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Server</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="mi">27017</span><span class="p">,{</span><span class="nx">auto_reconnect</span><span class="o">:</span> <span class="kc">true</span><span class="p">}),{</span><span class="nx">w</span><span class="o">:</span><span class="mi">1</span><span class="p">});</span>
</span><span class='line'><span class="c1">// Connect to the db</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span><span class="nx">db</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">scanDirectory</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">dir</span><span class="p">){</span>
</span><span class='line'>		<span class="k">if</span><span class="p">(</span><span class="nx">openFiles</span><span class="o">&gt;</span><span class="nx">maxOpenFiles</span><span class="p">){</span>
</span><span class='line'>			<span class="c1">// wait a bit if the maximum number of files is open.</span>
</span><span class='line'>			<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">scanDirectory</span><span class="p">(</span><span class="nx">dir</span><span class="p">);},</span> <span class="nx">waitTime</span><span class="p">);</span>	
</span><span class='line'>		<span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>			<span class="c1">// gather files and directories inside directory currently being scanned</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">files</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readdirSync</span><span class="p">(</span><span class="nx">dir</span><span class="p">);</span>			
</span><span class='line'>				<span class="nx">files</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">){</span>
</span><span class='line'>					<span class="c1">// get stats about file to check if its a directory and to get file size								</span>
</span><span class='line'>					<span class="kd">var</span> <span class="nx">stat</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">lstatSync</span><span class="p">(</span><span class="nx">dir</span> <span class="o">+</span> <span class="nx">file</span><span class="p">);</span>
</span><span class='line'>					<span class="k">if</span><span class="p">(</span><span class="nx">stat</span><span class="p">.</span><span class="nx">isFile</span><span class="p">()){</span>
</span><span class='line'>						<span class="k">if</span><span class="p">(</span><span class="nx">openFiles</span> <span class="o">&gt;</span> <span class="nx">maxOpenFiles</span><span class="p">){</span>
</span><span class='line'>							<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">dir</span><span class="p">,</span><span class="nx">file</span><span class="p">,</span><span class="nx">stat</span><span class="p">.</span><span class="nx">size</span><span class="p">)},</span> <span class="nx">waitTime</span><span class="p">);</span>
</span><span class='line'>						<span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>							<span class="nx">readFile</span><span class="p">(</span><span class="nx">dir</span><span class="p">,</span><span class="nx">file</span><span class="p">,</span><span class="nx">stat</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>
</span><span class='line'>						<span class="p">}</span>
</span><span class='line'>						
</span><span class='line'>					<span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">stat</span><span class="p">.</span><span class="nx">isDirectory</span><span class="p">()){</span>
</span><span class='line'>						<span class="c1">// if is a directory add to list of directories to scan.</span>
</span><span class='line'>						<span class="nx">directoriesToScan</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">dir</span> <span class="o">+</span> <span class="nx">file</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'>					<span class="p">}</span>
</span><span class='line'>				<span class="p">});</span>
</span><span class='line'>			<span class="k">if</span><span class="p">(</span><span class="nx">directoriesToScan</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>				<span class="k">if</span><span class="p">(</span><span class="nx">openFiles</span> <span class="o">&gt;</span> <span class="nx">maxOpenFiles</span><span class="p">){</span>
</span><span class='line'>					<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">scanDirectory</span><span class="p">(</span><span class="nx">directoriesToScan</span><span class="p">.</span><span class="nx">pop</span><span class="p">());},</span> <span class="nx">waitTime</span><span class="p">);</span>	
</span><span class='line'>				<span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>					<span class="nx">scanDirectory</span><span class="p">(</span><span class="nx">directoriesToScan</span><span class="p">.</span><span class="nx">pop</span><span class="p">());</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">};</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">readFile</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">dir</span><span class="p">,</span><span class="nx">file</span><span class="p">,</span><span class="nx">size</span><span class="p">){</span>	
</span><span class='line'>		<span class="c1">//console.log(openFiles + &quot; readFile&quot;);</span>
</span><span class='line'>		<span class="k">if</span><span class="p">(</span><span class="nx">openFiles</span> <span class="o">&gt;</span> <span class="nx">maxOpenFiles</span><span class="p">){</span>
</span><span class='line'>			<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">dir</span><span class="p">,</span><span class="nx">file</span><span class="p">,</span><span class="nx">size</span><span class="p">)},</span> <span class="nx">waitTime</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>			<span class="nx">openFiles</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>			<span class="c1">// setup file stream and hash</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">fd</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="nx">dir</span> <span class="o">+</span> <span class="nx">file</span><span class="p">);</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">hash</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="s1">&#39;md5&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="nx">hash</span><span class="p">.</span><span class="nx">setEncoding</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>			<span class="nx">fd</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>			    <span class="nx">hash</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>			    <span class="nx">openFiles</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>			    <span class="c1">// when finished reading file insert file details into collection (make sure to create the collection first)</span>
</span><span class='line'>			    <span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">(</span><span class="s1">&#39;files&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">collection</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>					<span class="nx">collection</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span><span class="nx">fileName</span><span class="o">:</span><span class="nx">file</span><span class="p">,</span><span class="nx">path</span><span class="o">:</span><span class="nx">dir</span><span class="o">+</span><span class="nx">file</span><span class="p">,</span><span class="nx">hash</span><span class="o">:</span><span class="nx">hash</span><span class="p">.</span><span class="nx">read</span><span class="p">(),</span><span class="nx">size</span><span class="o">:</span><span class="nx">size</span><span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
</span><span class='line'>						<span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>						<span class="k">if</span><span class="p">(</span><span class="nx">openFiles</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">directoriesToScan</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">db</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>					<span class="p">});</span>			
</span><span class='line'>				<span class="p">});</span>
</span><span class='line'>			<span class="p">});</span>
</span><span class='line'>
</span><span class='line'>			<span class="nx">fd</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>				<span class="nx">openFiles</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;stream error &quot;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">);</span>
</span><span class='line'>			<span class="p">});</span>
</span><span class='line'>
</span><span class='line'>			<span class="c1">// read all file and pipe it (write it) to the hash object</span>
</span><span class='line'>			<span class="nx">fd</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">hash</span><span class="p">);</span>
</span><span class='line'>								
</span><span class='line'>			
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">};</span>
</span><span class='line'>
</span><span class='line'>	<span class="c1">// start the scanning </span>
</span><span class='line'>	<span class="nx">scanDirectory</span><span class="p">(</span><span class="nx">startingDirectory</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Further reading</h2>

<ul>
<li><a href="http://docs.mongodb.org/ecosystem/drivers/node-js/">Node.js MongoDB Driver</a></li>
<li><a href="http://nodejs.org/api/fs.html">Node.js File System Module</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
